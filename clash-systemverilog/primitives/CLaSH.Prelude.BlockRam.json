[ { "BlackBox" :
    { "name" : "CLaSH.Prelude.BlockRam.blockRam#"
    , "type" :
"blockRam# :: KnownNat n       -- ARG[0]
           => SClock clk       -- clk,  ARG[1]
           -> Vec n a          -- init, ARG[2]
           -> Signal' clk Int  -- wr,   ARG[3]
           -> Signal' clk Int  -- rd,   ARG[4]
           -> Signal' clk Bool -- wren, ARG[5]
           -> Signal' clk a    -- din,  ARG[6]
           -> Signal' clk a"
    , "templateD" :
"// blockRam begin
typedef logic [~SIZE[~TYPO]-1:0] ~GENSYM[RAM_array][4] [0:~LENGTH[~TYP[2]]-1];
~SYM[4] ~GENSYM[RAM][0];
logic [~SIZE[~TYPO]-1:0] ~GENSYM[dout][1];

function ~SYM[4] ~GENSYM[init_to_bv][2];
  input ~SIGD[value][2];
  begin
    for (int ~GENSYM[i][5]=0; ~SYM[5]<~LENGTH[~TYP[2]]; ~SYM[5]=~SYM[5]+1)
      ~SYM[2][i] = ~TOBV[value[ ~SYM[5] ]][~TYP[6]];
  end
endfunction

initial begin
  ~SYM[0] = ~SYM[2](~LIT[2]);
end

always @(posedge ~CLK[1]) begin : ~GENSYM[~COMPNAME_blockRam][3]
  if (~ARG[5]) begin
    ~SYM[0][~ARG[3]] <= ~TOBV[~ARG[6]][~TYP[6]];
  end
  ~SYM[1] <= ~SYM[0][~ARG[4]];
end

assign ~RESULT = ~FROMBV[~SYM[1]][~TYP[6]];
// blockRam end"
    }
  }
]
